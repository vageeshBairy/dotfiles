# set cleaner ~/.config/lf/ktty_cleaner
set previewer ~/.config/lf/previewer

# Basic Settings
set shell sh
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set drawbox
set hidden true
set ignorecase true
set icons true
set sixel true
set rulerfmt "%d  |%a  |%p  |\033[7;31m %m \033[0m  |\033[7;33m %c \033[0m  |\033[7;35m %s \033[0m  |\033[7;34m %f \033[0m  |%i/%t"

# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd setwallpaper ${{
    nohup setwallpaper "$f" </dev/null >/dev/null 2>&1 &
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.rar) unrar x "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.7z) 7z e "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd open ${{    
    test -L $f && f=$(readlink -f $f)    
    case "$(file --mime-type "$f" -b)" in    
        text/*) nvim $fx ;;    
        audio/*) mpv --audio-display=no $f ;;    
        video/*) nohup mpv $fx </dev/null >/dev/null 2>&1 &;; 
        *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;    
    esac    
}}

cmd on-select &{{
    lf -remote "send $id set statfmt \"$(exa -ld --color=always "$f")\""
}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}
map <c-f> :fzf_jump

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}
map <c-g> :fzf_search

cmd z-jump ${{
  ZLUA_SCRIPT="$ZDOTDIR/plugins/z.lua/z.lua"
  lf -remote "send ${id} cd \"$($ZLUA_SCRIPT -e $@ | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}
map Z push :z-jump<space>-I<space>
map zb push :z-jump<space>-b<space>
map zz push :z-jump<space>

# Bindings
map c
map d
map m

map co $vscodium "$f"
map cf $dotbare fadd -f

map au unarchive
map ae $wine "$f"

# Basic Functions
map . set hidden!
map dd trash
map u $trash restore -r 0
map dr $trash restore
map de $trash empty --all
map p paste
map x cut
map y copy
map <enter> open
map R reload
map mf mkfile
map md mkdir
map bg setwallpaper
map C clear

# Movement
map gc cd ~/.config
map gD cd ~/Documents
map gd cd ~/Downloads
map gp cd ~/Pictures
map gr cd ~/repos
map gv cd ~/Videos
map gs cd ~/.local/bin
map gt cd ~/.local/share/Trash/files
